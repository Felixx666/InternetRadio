#include <fcntl.h>
#include <iostream>
#include <string>
#include <unistd.h>
#include <sys/ioctl.h>
#include <linux/i2c-dev.h>
#include <cstring>

#include "display.h"

// OLED display dimensions
constexpr int OLED_WIDTH = 128;
constexpr int OLED_HEIGHT = 32;
constexpr int OLED_PAGES = OLED_HEIGHT / 8;

// I2C address for the OLED
constexpr int OLED_I2C_ADDR = 0x3C;

// Global framebuffer: one byte per column per page.
uint8_t buffer[OLED_WIDTH * OLED_PAGES];

// Basic 5x7 font for ASCII characters 32 to 127.
// Each character is 5 bytes (columns). Only the lower 7 bits are used.
static const uint8_t font5x7[96][5] = {
    {0x00,0x00,0x00,0x00,0x00}, // 32 ' '
    {0x00,0x00,0x5F,0x00,0x00}, // 33 '!'
    {0x00,0x07,0x00,0x07,0x00}, // 34 '"'
    {0x14,0x7F,0x14,0x7F,0x14}, // 35 '#'
    {0x24,0x2A,0x7F,0x2A,0x12}, // 36 '$'
    {0x23,0x13,0x08,0x64,0x62}, // 37 '%'
    {0x36,0x49,0x55,0x22,0x50}, // 38 '&'
    {0x00,0x05,0x03,0x00,0x00}, // 39 '''
    {0x00,0x1C,0x22,0x41,0x00}, // 40 '('
    {0x00,0x41,0x22,0x1C,0x00}, // 41 ')'
    {0x14,0x08,0x3E,0x08,0x14}, // 42 '*'
    {0x08,0x08,0x3E,0x08,0x08}, // 43 '+'
    {0x00,0x50,0x30,0x00,0x00}, // 44 ','
    {0x08,0x08,0x08,0x08,0x08}, // 45 '-'
    {0x00,0x60,0x60,0x00,0x00}, // 46 '.'
    {0x20,0x10,0x08,0x04,0x02}, // 47 '/'
    {0x3E,0x51,0x49,0x45,0x3E}, // 48 '0'
    {0x00,0x42,0x7F,0x40,0x00}, // 49 '1'
    {0x42,0x61,0x51,0x49,0x46}, // 50 '2'
    {0x21,0x41,0x45,0x4B,0x31}, // 51 '3'
    {0x18,0x14,0x12,0x7F,0x10}, // 52 '4'
    {0x27,0x45,0x45,0x45,0x39}, // 53 '5'
    {0x3C,0x4A,0x49,0x49,0x30}, // 54 '6'
    {0x01,0x71,0x09,0x05,0x03}, // 55 '7'
    {0x36,0x49,0x49,0x49,0x36}, // 56 '8'
    {0x06,0x49,0x49,0x29,0x1E}, // 57 '9'
    {0x00,0x36,0x36,0x00,0x00}, // 58 ':'
    {0x00,0x56,0x36,0x00,0x00}, // 59 ';'
    {0x08,0x14,0x22,0x41,0x00}, // 60 '<'
    {0x14,0x14,0x14,0x14,0x14}, // 61 '='
    {0x00,0x41,0x22,0x14,0x08}, // 62 '>'
    {0x02,0x01,0x51,0x09,0x06}, // 63 '?'
    {0x32,0x49,0x79,0x41,0x3E}, // 64 '@'
    {0x7E,0x11,0x11,0x11,0x7E}, // 65 'A'
    {0x7F,0x49,0x49,0x49,0x36}, // 66 'B'
    {0x3E,0x41,0x41,0x41,0x22}, // 67 'C'
    {0x7F,0x41,0x41,0x22,0x1C}, // 68 'D'
    {0x7F,0x49,0x49,0x49,0x41}, // 69 'E'
    {0x7F,0x09,0x09,0x09,0x01}, // 70 'F'
    {0x3E,0x41,0x49,0x49,0x7A}, // 71 'G'
    {0x7F,0x08,0x08,0x08,0x7F}, // 72 'H'
    {0x00,0x41,0x7F,0x41,0x00}, // 73 'I'
    {0x20,0x40,0x41,0x3F,0x01}, // 74 'J'
    {0x7F,0x08,0x14,0x22,0x41}, // 75 'K'
    {0x7F,0x40,0x40,0x40,0x40}, // 76 'L'
    {0x7F,0x02,0x0C,0x02,0x7F}, // 77 'M'
    {0x7F,0x04,0x08,0x10,0x7F}, // 78 'N'
    {0x3E,0x41,0x41,0x41,0x3E}, // 79 'O'
    {0x7F,0x09,0x09,0x09,0x06}, // 80 'P'
    {0x3E,0x41,0x51,0x21,0x5E}, // 81 'Q'
    {0x7F,0x09,0x19,0x29,0x46}, // 82 'R'
    {0x46,0x49,0x49,0x49,0x31}, // 83 'S'
    {0x01,0x01,0x7F,0x01,0x01}, // 84 'T'
    {0x3F,0x40,0x40,0x40,0x3F}, // 85 'U'
    {0x1F,0x20,0x40,0x20,0x1F}, // 86 'V'
    {0x3F,0x40,0x38,0x40,0x3F}, // 87 'W'
    {0x63,0x14,0x08,0x14,0x63}, // 88 'X'
    {0x07,0x08,0x70,0x08,0x07}, // 89 'Y'
    {0x61,0x51,0x49,0x45,0x43}, // 90 'Z'
    {0x00,0x7F,0x41,0x41,0x00}, // 91 '['
    {0x02,0x04,0x08,0x10,0x20}, // 92 backslash
    {0x00,0x41,0x41,0x7F,0x00}, // 93 ']'
    {0x04,0x02,0x01,0x02,0x04}, // 94 '^'
    {0x40,0x40,0x40,0x40,0x40}, // 95 '_'
    {0x00,0x03,0x05,0x00,0x00}, // 96 '`'
    {0x20,0x54,0x54,0x54,0x78}, // 97 'a'
    {0x7F,0x48,0x44,0x44,0x38}, // 98 'b'
    {0x38,0x44,0x44,0x44,0x20}, // 99 'c'
    {0x38,0x44,0x44,0x48,0x7F}, // 100 'd'
    {0x38,0x54,0x54,0x54,0x18}, // 101 'e'
    {0x08,0x7E,0x09,0x01,0x02}, // 102 'f'
    {0x0C,0x52,0x52,0x52,0x3E}, // 103 'g'
    {0x7F,0x08,0x04,0x04,0x78}, // 104 'h'
    {0x00,0x44,0x7D,0x40,0x00}, // 105 'i'
    {0x20,0x40,0x44,0x3D,0x00}, // 106 'j'
    {0x7F,0x10,0x28,0x44,0x00}, // 107 'k'
    {0x00,0x41,0x7F,0x40,0x00}, // 108 'l'
    {0x7C,0x04,0x18,0x04,0x78}, // 109 'm'
    {0x7C,0x08,0x04,0x04,0x78}, // 110 'n'
    {0x38,0x44,0x44,0x44,0x38}, // 111 'o'
    {0x7C,0x14,0x14,0x14,0x08}, // 112 'p'
    {0x08,0x14,0x14,0x18,0x7C}, // 113 'q'
    {0x7C,0x08,0x04,0x04,0x08}, // 114 'r'
    {0x48,0x54,0x54,0x54,0x20}, // 115 's'
    {0x04,0x3F,0x44,0x40,0x20}, // 116 't'
    {0x3C,0x40,0x40,0x20,0x7C}, // 117 'u'
    {0x1C,0x20,0x40,0x20,0x1C}, // 118 'v'
    {0x3C,0x40,0x30,0x40,0x3C}, // 119 'w'
    {0x44,0x28,0x10,0x28,0x44}, // 120 'x'
    {0x0C,0x50,0x50,0x50,0x3C}, // 121 'y'
    {0x44,0x64,0x54,0x4C,0x44}, // 122 'z'
    {0x00,0x08,0x36,0x41,0x00}, // 123 '{'
    {0x00,0x00,0x7F,0x00,0x00}, // 124 '|'
    {0x00,0x41,0x36,0x08,0x00}, // 125 '}'
    {0x10,0x08,0x08,0x10,0x08}, // 126 '~'
    {0x00,0x00,0x00,0x00,0x00}  // 127 DEL
};

// Send a single command byte to the OLED
void sendCommand(int fd, uint8_t cmd) {
  uint8_t data[2];
  data[0] = 0x00; // Control byte for command
  data[1] = cmd;
  if (write(fd, data, 2) != 2) {
    std::cerr << "Failed to write command\n";
  }
}

// Initialize the OLED display.
void initOLED(int fd) {
  sendCommand(fd, 0xAE); // Display OFF
  sendCommand(fd, 0xD5); // Set display clock divide ratio
  sendCommand(fd, 0x80);
  sendCommand(fd, 0xA8); // set multiplex ration
  sendCommand(fd, 0x1F); // 32 rows - 1
  sendCommand(fd, 0xD3); // Set display offset
  sendCommand(fd, 0x00);
  sendCommand(fd, 0x40); // Set start line at 0
  sendCommand(fd, 0x8D); // Enable charge pump
  sendCommand(fd, 0x14);
  sendCommand(fd, 0x20); // Memory addressing mode
  sendCommand(fd, 0x00); // Horizontal addressing mode
  sendCommand(fd, 0xA1); // Segment remap
  sendCommand(fd, 0xC8); // COM scan direction remapped
  sendCommand(fd, 0xDA); // Set COM pins hardware config
  sendCommand(fd, 0x02);
  sendCommand(fd, 0x81); // Set contrast
  sendCommand(fd, 0x8F);
  sendCommand(fd, 0xD9); // Set pre-charge period
  sendCommand(fd, 0xF1);
  sendCommand(fd, 0xDB); // Set VCOM deselect level
  sendCommand(fd, 0x40);
  sendCommand(fd, 0xA4); // Entire display on from RAM
  sendCommand(fd, 0xA6); // Normal display
  sendCommand(fd, 0xAF); // Display ON
}

// Update the OLED with the current frambuffer content.
void updateDisplay(int fd) {
  // Set the column and page adressing
  sendCommand(fd, 0x21);
  sendCommand(fd, 0x00);
  sendCommand(fd, OLED_WIDTH - 1);
  sendCommand(fd, 0x22);
  sendCommand(fd, 0x00);
  sendCommand(fd, OLED_PAGES - 1);

  // Data transfer: prepend each chunk with a 0x40 control byte.
  // Here we send all data in one block.
  uint8_t data[1 + sizeof(buffer)];
  data[0] = 0x40; // Control byte for data
  memcpy(&data[1], buffer, sizeof(buffer));

  if (write(fd, data, sizeof(data)) != static_cast<ssize_t>(sizeof(data))) {
    std::cerr << "Failed to write display data\n";
  }
}

// Draw a single character at (x, page). 'page' is vertical position in units
// of 8 pixels.
void drawChar(int x, int page, char c) {
  if (c < 32 || c > 127) {
    return; // ignore unsupported characters
  }
  int index = c - 32;
  for (int col = 0; col < 5; ++col) {
    int pos = page * OLED_WIDTH + x + col;
    if (x + col < OLED_WIDTH) {
      buffer[pos] = font5x7[index][col];
    }
  }
  // One column spacing after the character.
  if (x + 5 < OLED_WIDTH) {
    buffer[page * OLED_WIDTH + x + 5] = 0x00;
  }
}

// Print a string on the display at pixel coordinate (x, y).
// y should be a multiple of 8 (0, 8, 16 or 24).
void printString(const std::string &str, int x, int y) {
  int page = y / 8;
  for (char c : str) {
    if (x + 6 > OLED_WIDTH) {
      break; // no more space on the line
    }
    drawChar(x, page, c);
    x += 6; // 5 pixels for char + 1 pixel space
  }
}

// Draw a single pixel at (x, y) in the buffer.
// This simple function sets a bit in the buffer if it's within bounds.
void setPixel(int x, int y) {
  if (x < 0 || x >= OLED_WIDTH || y < 0 || y >= OLED_HEIGHT)
    return;
  int page = y / 8;
  int bit = y % 8;
  buffer[page * OLED_WIDTH + x] |= (1 << bit);
}

// Draw a scaled character at position (x, y) with a given scale factor.
// (x, y) is the top-left pixel of where the character will be drawn.
void drawCharScaled(int x, int y, char c, int scale) {
  if (c < 32 || c > 127) {
    return; // unsupported character
  }
  int index = c - 32;
  // Each character is 5 columns wide and 7 rows high.
  for (int col = 0; col < 5; ++col) {
    uint8_t colData = font5x7[index][col];
    for (int row = 0; row < 7; ++row) {
      // Check if the pixel is set in the font data.
      if (colData & (1 << row)) {
        // Draw a block of pixels for scaling.
        for (int dx = 0; dx < scale; ++dx) {
          for (int dy = 0; dy < scale; ++dy) {
            setPixel(x + col * scale + dx, y + row * scale + dy);
          }
        }
      }
    }
  }
}

// Print a scaled string on the display.
// (x, y) is the top-left pixel of the first character.
void Display::printStringScaled(const std::string &str, int x, int y,
    int scale) {
  for (char c : str) {
    drawCharScaled(x, y, c, scale);
    // Advance x by (character width * scale + spacing).
    // Original character width is 5 pixels; here we add one pixel of 
    // spacing, scaled.
    x += (5 * scale) + scale;
    if (x >= OLED_WIDTH) {
      break; // Stop if there's no more space.
    }
  }
  updateDisplay(fd);
}


// Clear the framebuffer
void clearBuffer() {
  memset(buffer, 0, sizeof(buffer));
}

void Display::clear() {
  for (int i = 0; i < OLED_WIDTH; ++i) {
    for (int j = 0; j < OLED_PAGES; ++j) {
      drawChar(i, j, ' ');
    }
  }
  updateDisplay(fd);
}

// Initialize display
void Display::init() {
  //const char *i2cDevice = "/dev/i2c-1";
  fd = open(i2cDevice, O_RDWR);
  if (fd < 0) {
    std::cerr << "Error: Cant open " << i2cDevice << "\n";
  }
  if (ioctl(fd, I2C_SLAVE, OLED_I2C_ADDR) < 0) {
    std::cerr << "Error: Could not set I2C address\n";
    close(fd);
  }

  initOLED(fd);
  clearBuffer();
}

//int main() {
//  initDisplay();

  // Print a simple string at (0, 0)
//  printStringScaled("Huhu!", 0, 0, 2);

//  updateDisplay(fd);
  // Keep the programm alive so you can see the diplay
//  sleep(5);
//  close(fd);
//  return 0;
//}
